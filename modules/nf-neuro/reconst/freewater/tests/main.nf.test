nextflow_process {

    name "Test Process RECONST_FREEWATER"
    script "../main.nf"
    process "RECONST_FREEWATER"

    tag "modules"
    tag "modules_nfneuro"
    tag "reconst"
    tag "reconst/freewater"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
            run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
                script "../../../../../subworkflows/nf-neuro/load_test_data/main.nf"
                process {
                    """
                    input[0] = Channel.from( [ "commit_amico.zip" ] )
                    input[1] = "test.load-test-data"
                    """
                }
            }
        }

    test("reconst - freewater") {

        when {
            config "./nextflow.config"
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory
                    .map{ test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/dwi.bval", checkIfExists: true),
                        file("\${test_data_directory}/dwi.bvec", checkIfExists: true),
                        file("\${test_data_directory}/mask.nii.gz", checkIfExists: true),
                        []
                    ]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.kernels.get(0)).listFiles().size(),
                    file(process.out.dwi_fw_corrected.get(0).get(1)).name,
                    niftiMD5SUM(process.out.dir.get(0).get(1), 1),
                    niftiMD5SUM(process.out.fibervolume.get(0).get(1), 3),
                    niftiMD5SUM(process.out.fw.get(0).get(1), 3),
                    niftiMD5SUM(process.out.nrmse.get(0).get(1), 3)
                ).match() }
            )
        }

    }

    test("reconst - freewater_no_mask_compute_only") {

        when {
            config "./nextflow_compute_only.config"
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory
                    .map{ test_data_directory -> [
                        [ id:'test', single_end:false ], // meta map
                        file("\${test_data_directory}/dwi.nii.gz", checkIfExists: true),
                        file("\${test_data_directory}/dwi.bval", checkIfExists: true),
                        file("\${test_data_directory}/dwi.bvec", checkIfExists: true),
                        [],
                        []
                    ]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.versions,
                    file(process.out.kernels.get(0)).listFiles().size()
                ).match() }
            )
        }

    }

    test("reconst - freewater - stub-run") {
        tag "stub"
        options "-stub-run"
        when {
            process {
                """
                input[0] = LOAD_DATA.out.test_data_directory
                    .map{ test_data_directory -> [
                    [ id:'test', single_end:false ], // meta map
                    file("\${test_data_directory}/dwi.nii.gz"),
                    file("\${test_data_directory}/dwi.bval"),
                    file("\${test_data_directory}/dwi.bvec"),
                    file("\${test_data_directory}/mask.nii.gz"),
                    []
                ]}
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.versions).match() }
            )
        }

    }

}
