nextflow_workflow {

    name "Test Subworkflow PREPROC_T1"
    script "../main.nf"
    workflow "PREPROC_T1"

    tag "subworkflows"
    tag "subworkflows_nfneuro"
    tag "subworkflows/preproc_t1"

    tag "denoising/nlmeans"
    tag "preproc/n4"
    tag "image/resample"
    tag "betcrop/antsbet"
    tag "betcrop/synthbet"
    tag "image/cropvolume"

    tag "load_test_data"

    tag "stub"
    options "-stub-run"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "antsbet.zip" , "T1w.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("preproc_t1_antsbet_error") {
        config "./nextflow.config"
        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        antsbet: it.simpleName == "antsbet"
                        t1w: it.simpleName == "T1w"
                    }
                input[0] = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]}
                input[1] = Channel.empty()
                input[2] = Channel.empty()
                input[3] = Channel.empty()
                input[4] = Channel.empty()
                input[5] = Channel.empty()
                input[6] = Channel.empty()
                input[7] = Channel.empty()
                """
            }
        }

        then {
            assert workflow.failed
        }
    }

    test("preproc_t1_antsbet") {
        config "./nextflow.config"
        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        antsbet: it.simpleName == "antsbet"
                        t1w: it.simpleName == "T1w"
                    }
                input[0] = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]}
                input[1] = ch_split_test_data.antsbet.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/t1_template.nii.gz")
                    ]}
                input[2] = ch_split_test_data.antsbet.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/t1_brain_probability_map.nii.gz"),
                    ]}
                input[3] = Channel.empty()
                input[4] = Channel.empty()
                input[5] = Channel.empty()
                input[6] = Channel.empty()
                input[7] = Channel.empty()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out
                        .findAll{ channel -> !channel.key.isInteger() && channel.value  }
                        .collectEntries{ channel ->
                            [(channel.key): ["versions"].contains(channel.key)
                                ? channel.value
                                : channel.value.collect{ subject ->
                                    [ subject[0] ] + subject[1..-1].collect{ entry -> entry ? file(entry).name : "" }
                            } ]
                        }
                ).match() },
                { assert workflow.out
                    .findAll{ !it.key.isInteger() }
                    .every{ channel ->
                        channel.value.every{ subject -> subject instanceof ArrayList
                            ? subject.every()
                            : subject } } }
            )
        }
    }

    test("preproc_t1_synthbet") {
        config "./nextflow_synthbet.config"

        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        antsbet: it.simpleName == "antsbet"
                        t1w: it.simpleName == "T1w"
                    }
                input[0] = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]}
                input[1] = Channel.empty()
                input[2] = Channel.empty()
                input[3] = Channel.empty()
                input[4] = Channel.empty()
                input[5] = Channel.empty()
                input[6] = Channel.empty()
                input[7] = Channel.empty()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    workflow.out
                        .findAll{ channel -> !channel.key.isInteger() && channel.value  }
                        .collectEntries{ channel ->
                            [(channel.key): ["versions"].contains(channel.key)
                                ? channel.value
                                : channel.value.collect{ subject ->
                                    [ subject[0] ] + subject[1..-1].collect{ entry -> entry ? file(entry).name : "" }
                            } ]
                        }
                ).match() },
                { assert workflow.out
                    .findAll{ !it.key.isInteger() }
                    .every{ channel ->
                        channel.value.every{ subject -> subject instanceof ArrayList
                            ? subject.every()
                            : subject } } }
            )
        }
    }

    test("preproc_t1_quick") {
        config "./nextflow_quick.config"

        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        antsbet: it.simpleName == "antsbet"
                        t1w: it.simpleName == "T1w"
                    }
                input[0] = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]}
                input[1] = Channel.empty()
                input[2] = Channel.empty()
                input[3] = Channel.empty()
                input[4] = Channel.empty()
                input[5] = Channel.empty()
                input[6] = Channel.empty()
                input[7] = Channel.empty()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out
                        .findAll{ channel -> !channel.key.isInteger() && channel.value  }
                        .collectEntries{ channel ->
                            [(channel.key): ["versions"].contains(channel.key)
                                ? channel.value
                                : channel.value.collect{ subject ->
                                    [ subject[0] ] + subject[1..-1].collect{ entry -> entry ? file(entry).name : "" }
                            } ]
                        }
                ).match() },
                { assert workflow.out
                    .findAll{ !it.key.isInteger() }
                    .every{ channel -> ["image_N4",
                                        "image_bet",
                                        "mask_bet"].contains(channel.key)
                        ? channel.value.size() == 0
                        : channel.value.every{ subject -> subject instanceof ArrayList
                            ? subject.every()
                            : subject } } }
            )
        }
    }

    test("preproc_t1_skip_all") {
        config "./nextflow_skip_all.config"

        when {
            workflow {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        antsbet: it.simpleName == "antsbet"
                        t1w: it.simpleName == "T1w"
                    }
                input[0] = ch_split_test_data.t1w.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/T1w.nii.gz")
                    ]}
                input[1] = Channel.empty()
                input[2] = Channel.empty()
                input[3] = Channel.empty()
                input[4] = Channel.empty()
                input[5] = Channel.empty()
                input[6] = Channel.empty()
                input[7] = Channel.empty()
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out
                        .findAll{ channel -> !channel.key.isInteger() && channel.value  }
                        .collectEntries{ channel ->
                            [(channel.key): ["versions"].contains(channel.key)
                                ? channel.value
                                : channel.value.collect{ subject ->
                                    [ subject[0] ] + subject[1..-1].collect{ entry -> entry ? file(entry).name : "" }
                            } ]
                        }
                ).match() },
                { assert workflow.out
                    .findAll{ !it.key.isInteger() }
                    .every{ channel -> ["image_nlmeans",
                                        "image_N4",
                                        "image_resample",
                                        "image_bet",
                                        "mask_bet",
                                        "crop_box"].contains(channel.key)
                        ? channel.value.size() == 0
                        : channel.value.every{ subject -> subject instanceof ArrayList
                            ? subject.every()
                            : subject } } }
            )
        }
    }
}
